Description: >
  Capstone server available on port 8080

Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: backend-group
      GroupDescription: Allow port 22 and port 8080
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.medium # smallest instance that can support minikube
      SecurityGroups:
        - Ref: InstanceSecurityGroup
      KeyName: udacity 
      ImageId: ami-013f17f36f8b1fefb
      Tags:
        - Key: Name
          Value: backend_python

  LBSecGroup: #from https://github.com/udacity/nd9991-c2-Infrastructure-as-Code-v1/tree/master/supporting_material
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId: vpc-415efd3c
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0

  WebAppLB: #from https://github.com/udacity/nd9991-c2-Infrastructure-as-Code-v1/tree/master/supporting_material
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - subnet-931a529d
      - subnet-c92d0b84
      - subnet-4f1ac07e
      - subnet-4f21b629
      - subnet-e7ac31c6
      - subnet-e5ff6cba
      SecurityGroups:
      - Ref: LBSecGroup

  Listener: #from https://github.com/udacity/nd9991-c2-Infrastructure-as-Code-v1/tree/master/supporting_material
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '8080'
      Protocol: HTTP
  ALBListenerRule: #from https://github.com/udacity/nd9991-c2-Infrastructure-as-Code-v1/tree/master/supporting_material
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Targets:
        - Id: !Ref EC2Instance
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: vpc-415efd3c
Outputs: 
  LoadBalancerDNS: 
    Description: The hostname of the create loadbalancer
    Value: !Sub http://${WebAppLB.DNSName}
    Export:
      Name: LB-DNS
  EC2PublicIP:
    Description: The IP of our EC2 instand
    Value: !Sub ${EC2Instance.PublicIp}
    Export:
      Name: EC2-IP
    