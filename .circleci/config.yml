version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "capstone-${CIRCLE_WORKFLOW_ID:0:7}"

jobs:
  BuildAndLint:
    docker:
    # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies

      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

  RunUnitTests:
    docker: 
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies
      - run:
          name: run unit tests
          command: | 
            python3 -m venv venv
            . venv/bin/activate
            make install
            cd src
            python3 test_suite.py


  BuildAndPushDocker:
    docker:
      - image: docker:latest
    steps:
      - checkout
      - setup_remote_docker
      - run: 
          name: Build  Image
          command: |
            docker build -t capstone_server .
      - run:
          name: Login To Docker
          command: | 
            docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}
      - run:
          name: Push Image
          command: |
            docker tag capstone_server ${DOCKERHUB_USERNAME}/udacity:${CIRCLE_WORKFLOW_ID:0:7}
            docker push ${DOCKERHUB_USERNAME}/udacity:${CIRCLE_WORKFLOW_ID:0:7}            

  CreateInfrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Create Infrastructure
          command: |
            cd .circleci/files
            aws cloudformation deploy --stack-name capstone-${CIRCLE_WORKFLOW_ID:0:7} --template-file=cloudformation.yml --region=us-east-1
            export LB_DNS=$(aws cloudformation list-exports \
              --query "Exports[?Name=='LB-DNS'].Value" \
              --no-paginate --output text)
            export EC2_IP=$(aws cloudformation list-exports \
              --query "Exports[?Name=='EC2-IP'].Value" \
              --no-paginate --output text)
            echo $LB_DNS > /root/project/LB_DNS.txt
            echo $EC2_IP > /root/project/EC2_IP.txt
            cat /root/project/LB_DNS.txt
            cat /root/project/EC2_IP.txt
      - persist_to_workspace:
          root: /root/project
          paths:
            - "LB_DNS.txt"
            - "EC2_IP.txt"
      - destroy-environment

  ConfigureInfrastructure:
    docker:
      - image: python:3.7-alpine3.11
    environment:
        ANSIBLE_HOST_KEY_CHECKING: "false"
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible curl
            pip install awscli
      - add_ssh_keys: 
          fingerprints: ["bf:00:85:a1:e2:5f:6f:c6:04:95:04:b9:47:a2:22:e8"]
      - attach_workspace:
          at: ~/
      - run: 
          name: Generate inventory
          command: |
            export EC2_IP=$(cat ~/EC2_IP.txt)
            echo "[web]" > /tmp/inventory.txt
            echo "$EC2_IP" >> /tmp/inventory.txt
            cat /tmp/inventory.txt
      - run:
          name: Update Infrastructure
          command: |
            ansible-playbook -vvv -i /tmp/inventory.txt .circleci/ansible/configure-server.yml --extra-vars "IMAGETAG=${CIRCLE_WORKFLOW_ID:0:7}"         
      - destroy-environment 
            
  SmokeTest:
    docker:
      - image: alpine:latest
    steps:
      - run:
          name: Install dependencies
          command: |
            apk add --update curl python3 py3-pip
            pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Smoke Test
          command: |
            export LB_DNS=$(cat ~/LB_DNS.txt)
            if $(curl -s $LB_DNS | grep -q "Hello World"); then return 0; else return 1; fi
      - destroy-environment

workflows:
  default:
    jobs:
      - BuildAndLint
      - RunUnitTests:
          requires: [BuildAndLint]
      - BuildAndPushDocker:
          requires: [BuildAndLint, RunUnitTests]
          filters:
            branches:
              only: [master]
      - CreateInfrastructure:
          requires: [BuildAndPushDocker]
      - ConfigureInfrastructure:
          requires: [CreateInfrastructure]
      - SmokeTest:
          requires: [ConfigureInfrastructure]

      
